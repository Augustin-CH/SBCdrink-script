# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import machine_pb2 as machine__pb2


class MachineStub(object):
    """Service qui permet de déclencher une action
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakeCocktail = channel.unary_unary(
                '/machine.Machine/MakeCocktail',
                request_serializer=machine__pb2.MakeCocktailRequest.SerializeToString,
                response_deserializer=machine__pb2.MakeCocktailResponse.FromString,
                )


class MachineServicer(object):
    """Service qui permet de déclencher une action
    """

    def MakeCocktail(self, request, context):
        """Définition d'une méthode pour déclencher une action
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MachineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakeCocktail': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeCocktail,
                    request_deserializer=machine__pb2.MakeCocktailRequest.FromString,
                    response_serializer=machine__pb2.MakeCocktailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'machine.Machine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Machine(object):
    """Service qui permet de déclencher une action
    """

    @staticmethod
    def MakeCocktail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/machine.Machine/MakeCocktail',
            machine__pb2.MakeCocktailRequest.SerializeToString,
            machine__pb2.MakeCocktailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
